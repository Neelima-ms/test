run-name: test, runnumber - ${{ github.event.inputs.environment }}
'on': 
 workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'development'

jobs:
    deploy:
     runs-on: ubuntu-latest
        
     steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GIT_ACCESSTOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const environment = '${{ github.event.inputs.environment }}';
            const dynamicWorkflowName = `Generate env file and deploy portal, EB ${environment}`;
            try {
              const { data: runs } = await github.actions.listWorkflowRunsForRepo({
                owner,
                repo,
                per_page: 2,
                status: 'completed',
              });
              
              const envRuns = runs.workflow_runs.filter(run => run.name === dynamicWorkflowName && (run.event === 'workflow_dispatch' || run.event === 'schedule'));
              
              if (envRuns.length > 0) {
                const previousRunId = envRuns[0].id;
                const { data: previousRunDetails } = await github.actions.getWorkflowRun({
                  owner,
                  repo,
                  run_id: previousRunId,
                });
                
                const previousRunNumber = previousRunDetails.run_number;
                console.log(`Found previous run number: ${previousRunNumber}`);
                return previousRunNumber;
              } else {
                throw new Error('No previous run found for the specified environment.');
              }
            } catch (error) {
              console.error(`Error retrieving previous run: ${error.message}`);
              throw error;
            }
      
 
      - name: Echo Previous Run Number
        run: echo "The previous run number for ${{ github.event.inputs.environment }} is ${{ steps.get_previous_run.outputs.result }}"
